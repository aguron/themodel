%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIMULATION 1: COMPLETE COMPOSITE PARADIGM EXPERIMENT %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Number of each trial type (top/bottom, aligned/misaligned)
%
% Total
n.T.All = n.CompFaces*((n.CompFaces-1)/2 + 1);
% Incongruent Same
% (cued half same between study and test stimuli)
n.IS.All = n.Expr*(n.Expr-1)*(n.Expr-2)/2;
% Incongruent Different
% (cued different same between study and test stimuli)
n.ID.All = n.IS.All;
% Congruent Same
n.CS.All = n.CompFaces;
% Congruent Different
n.CD.All = n.T.All - (n.CS.All + n.IS.All + n.ID.All);

% Initialize vectors to store comparisons
% Overall
%
% left-shifted aligned
% Incongruent Same
Cf.All.ITS_LS_A = zeros(n.IS.All, 1);
Cf.All.IBS_LS_A = zeros(n.IS.All, 1);
% Incongruent Different
Cf.All.ITD_LS_A = zeros(n.ID.All, 1);
Cf.All.IBD_LS_A = zeros(n.ID.All, 1);
% Congruent Same
Cf.All.CTS_LS_A = zeros(n.CS.All, 1);
Cf.All.CBS_LS_A = zeros(n.CS.All, 1);            
% Congruent Different
Cf.All.CTD_LS_A = zeros(n.CD.All, 1);
Cf.All.CBD_LS_A = zeros(n.CD.All, 1);
%
% right-shifted aligned
% Incongruent Same
Cf.All.ITS_RS_A = zeros(n.IS.All, 1);
Cf.All.IBS_RS_A = zeros(n.IS.All, 1);
% Incongruent Different
Cf.All.ITD_RS_A = zeros(n.ID.All, 1);
Cf.All.IBD_RS_A = zeros(n.ID.All, 1);            
% Congruent Same
Cf.All.CTS_RS_A = zeros(n.CS.All, 1);
Cf.All.CBS_RS_A = zeros(n.CS.All, 1);            
% Congruent Different
Cf.All.CTD_RS_A = zeros(n.CD.All, 1);
Cf.All.CBD_RS_A = zeros(n.CD.All, 1);
%
% top-left bottom-right misaligned
% Incongruent Same
Cf.All.ITS_TLBR_MA = zeros(n.IS.All, 1);
Cf.All.IBS_TLBR_MA = zeros(n.IS.All, 1);
% Incongruent Different
Cf.All.ITD_TLBR_MA = zeros(n.ID.All, 1);
Cf.All.IBD_TLBR_MA = zeros(n.ID.All, 1);            
% Congruent Same
Cf.All.CTS_TLBR_MA = zeros(n.CS.All, 1);
Cf.All.CBS_TLBR_MA = zeros(n.CS.All, 1);            
% Congruent Different
Cf.All.CTD_TLBR_MA = zeros(n.CD.All, 1);
Cf.All.CBD_TLBR_MA = zeros(n.CD.All, 1);
%
% top-right bottom-left misaligned
% Incongruent Same
Cf.All.ITS_TRBL_MA = zeros(n.IS.All, 1);
Cf.All.IBS_TRBL_MA = zeros(n.IS.All, 1);
% Incongruent Different
Cf.All.ITD_TRBL_MA = zeros(n.ID.All, 1);
Cf.All.IBD_TRBL_MA = zeros(n.ID.All, 1);            
% Congruent Same
Cf.All.CTS_TRBL_MA = zeros(n.CS.All, 1);
Cf.All.CBS_TRBL_MA = zeros(n.CS.All, 1);            
% Congruent Different
Cf.All.CTD_TRBL_MA = zeros(n.CD.All, 1);
Cf.All.CBD_TRBL_MA = zeros(n.CD.All, 1);

% Indices used to keep track of trial types
idx.All.ITS = 1;
idx.All.IBD = 1;
idx.All.ITD = 1;
idx.All.IBS = 1;
idx.All.CS = 1;
idx.All.CD = 1;

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SAME-DIFFERENT JUDGMENTS %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 1 - Same
% 0 - Different
for i=1:n.CompFaces
  for j=1:n.CompFaces
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Exploiting the way the stimuli are ordered
    %
    % Subset of 6 of stimulus i or j: ceil((i or j)/6)
    subset.size = 6;
    subset.i = ceil(i/subset.size);
    subset.j = ceil(j/subset.size);
    % Position of stimulus i or j in subset:
    % mod(((i or j)-1),6) + 1
    position.i = mod((i-1),subset.size) + 1;
    position.j = mod((j-1),subset.size) + 1;
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%
    % SELECTING STIMULI %
    %%%%%%%%%%%%%%%%%%%%%
    for i_numInst=1:n.NetInst
        % left-shifted aligned
        Stim.i.Top_LS_A{i_numInst} =...
            Stim.Top_LS_A{i_numInst}(i,:);
        Stim.j.Top_LS_A{i_numInst} =...
            Stim.Top_LS_A{i_numInst}(j,:);

        Stim.i.Bottom_LS_A{i_numInst} =...
            Stim.Bottom_LS_A{i_numInst}(i,:);
        Stim.j.Bottom_LS_A{i_numInst} =...
            Stim.Bottom_LS_A{i_numInst}(j,:);

        % right-shifted aligned
        Stim.i.Top_RS_A{i_numInst} =...
            Stim.Top_RS_A{i_numInst}(i,:);
        Stim.j.Top_RS_A{i_numInst} =...
            Stim.Top_RS_A{i_numInst}(j,:);

        Stim.i.Bottom_RS_A{i_numInst} =...
            Stim.Bottom_RS_A{i_numInst}(i,:);
        Stim.j.Bottom_RS_A{i_numInst} =...
            Stim.Bottom_RS_A{i_numInst}(j,:);

        % top-left bottom-right misaligned
        Stim.i.Top_TLBR_MA{i_numInst} =...
            Stim.Top_TLBR_MA{i_numInst}(i,:);
        Stim.j.Top_TLBR_MA{i_numInst} =...
            Stim.Top_TLBR_MA{i_numInst}(j,:);

        Stim.i.Bottom_TLBR_MA{i_numInst} =...
            Stim.Bottom_TLBR_MA{i_numInst}(i,:);
        Stim.j.Bottom_TLBR_MA{i_numInst} =...
            Stim.Bottom_TLBR_MA{i_numInst}(j,:);

        % top-right bottom-left misaligned
        Stim.i.Top_TRBL_MA{i_numInst} =...
            Stim.Top_TRBL_MA{i_numInst}(i,:);
        Stim.j.Top_TRBL_MA{i_numInst} =...
            Stim.Top_TRBL_MA{i_numInst}(j,:);

        Stim.i.Bottom_TRBL_MA{i_numInst} =...
            Stim.Bottom_TRBL_MA{i_numInst}(i,:);
        Stim.j.Bottom_TRBL_MA{i_numInst} =...
            Stim.Bottom_TRBL_MA{i_numInst}(j,:);
    end

    if (i == j)
      % left-shifted aligned
      %
      % Congruent Top Same
      Cf.All.CTS_LS_A(idx.All.CS) =...
          perceptroncompare({Stim.i.Top_LS_A, Stim.j.Top_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      % Congruent Bottom Same
      Cf.All.CBS_LS_A(idx.All.CS) =...
          perceptroncompare({Stim.i.Bottom_LS_A, Stim.j.Bottom_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %
      % right-shifted aligned
      %
      % Congruent Top Same
      Cf.All.CTS_RS_A(idx.All.CS) =...
          perceptroncompare({Stim.i.Top_RS_A, Stim.j.Top_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      % Congruent Bottom Same
      Cf.All.CBS_RS_A(idx.All.CS) =...
          perceptroncompare({Stim.i.Bottom_RS_A, Stim.j.Bottom_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %
      % top-left bottom-right misaligned
      %
      % Congruent Top Same
      Cf.All.CTS_TLBR_MA(idx.All.CS) =...
          perceptroncompare({Stim.i.Top_TLBR_MA, Stim.j.Top_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Congruent Bottom Same
      Cf.All.CBS_TLBR_MA(idx.All.CS) =...
          perceptroncompare({Stim.i.Bottom_TLBR_MA,...
                             Stim.j.Bottom_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %                                    
      % top-right bottom-left misaligned
      %
      % Congruent Top Same
      Cf.All.CTS_TRBL_MA(idx.All.CS) =...
          perceptroncompare({Stim.i.Top_TRBL_MA, Stim.j.Top_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Congruent Bottom Same
      Cf.All.CBS_TRBL_MA(idx.All.CS) =...
          perceptroncompare({Stim.i.Bottom_TRBL_MA,...
                             Stim.j.Bottom_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Prepare for the next set of Congruent Same
      % trials
      idx.All.CS = idx.All.CS + 1;
    elseif ((subset.i == subset.j) && (i < j))
      % left-shifted aligned
      %
      % Incongruent Top Same
      Cf.All.ITS_LS_A(idx.All.ITS) =...
          perceptroncompare({Stim.i.Top_LS_A, Stim.j.Top_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Incongruent Bottom Different
      Cf.All.IBD_LS_A(idx.All.IBD) =...
          perceptroncompare({Stim.i.Bottom_LS_A, Stim.j.Bottom_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %
      % right-shifted aligned
      %
      % Incongruent Top Same
      Cf.All.ITS_RS_A(idx.All.ITS) =...
          perceptroncompare({Stim.i.Top_RS_A, Stim.j.Top_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Incongruent Bottom Different
      Cf.All.IBD_RS_A(idx.All.IBD) =...
          perceptroncompare({Stim.i.Bottom_RS_A, Stim.j.Bottom_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %
      % top-left bottom-right misaligned
      %
      % Incongruent Top Same
      Cf.All.ITS_TLBR_MA(idx.All.ITS) =...
          perceptroncompare({Stim.i.Top_TLBR_MA, Stim.j.Top_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Incongruent Bottom Different
      Cf.All.IBD_TLBR_MA(idx.All.IBD) =...
          perceptroncompare({Stim.i.Bottom_TLBR_MA,...
                             Stim.j.Bottom_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %
      % top-right bottom-left misaligned
      %
      % Incongruent Top Same
      Cf.All.ITS_TRBL_MA(idx.All.ITS) =...
          perceptroncompare({Stim.i.Top_TRBL_MA, Stim.j.Top_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Incongruent Bottom Different
      Cf.All.IBD_TRBL_MA(idx.All.IBD) =...
          perceptroncompare({Stim.i.Bottom_TRBL_MA,...
                             Stim.j.Bottom_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Prepare for the next set of Incongruent Top
      % Same and Bottom Different trials
      idx.All.ITS = idx.All.ITS + 1;
      idx.All.IBD = idx.All.IBD + 1;
    elseif ((((subset.i <= position.i) && ...
           (subset.j ~= (position.i + 1)) && ...
           (subset.j <= position.j) && ...
           (position.i == position.j))...
           ||...
           ((subset.i <= position.i) && ...
           (subset.j ~= (position.i + 1)) && ...
           (subset.j > position.j) && ...
           ((position.i + 1) == position.j))...
           ||...
           ((subset.i > position.i) && ...
           (subset.j ~= position.i) && ...
           (subset.j > position.j) && ...
           (position.i == position.j)))...
           &&...
           (i < j))
      % left-shifted aligned
      %
      % Incongruent Top Different
      Cf.All.ITD_LS_A(idx.All.ITD) =...
          perceptroncompare({Stim.i.Top_LS_A, Stim.j.Top_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Incongruent Bottom Same
      Cf.All.IBS_LS_A(idx.All.IBS) =...
          perceptroncompare({Stim.i.Bottom_LS_A, Stim.j.Bottom_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %
      % right-shifted aligned
      %
      % Incongruent Top Different
      Cf.All.ITD_RS_A(idx.All.ITD) =...
          perceptroncompare({Stim.i.Top_RS_A, Stim.j.Top_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Incongruent Bottom Same
      Cf.All.IBS_RS_A(idx.All.IBS) =...
          perceptroncompare({Stim.i.Bottom_RS_A, Stim.j.Bottom_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %
      % top-left bottom-right misaligned
      %
      % Incongruent Top Different
      Cf.All.ITD_TLBR_MA(idx.All.ITD) =...
          perceptroncompare({Stim.i.Top_TLBR_MA, Stim.j.Top_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Incongruent Bottom Same
      Cf.All.IBS_TLBR_MA(idx.All.IBS) =...
          perceptroncompare({Stim.i.Bottom_TLBR_MA,...
                             Stim.j.Bottom_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %
      % top-right bottom-left misaligned
      %
      % Incongruent Top Different
      Cf.All.ITD_TRBL_MA(idx.All.ITD) =...
          perceptroncompare({Stim.i.Top_TRBL_MA, Stim.j.Top_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Incongruent Bottom Same
      Cf.All.IBS_TRBL_MA(idx.All.IBS) =...
          perceptroncompare({Stim.i.Bottom_TRBL_MA,...
                             Stim.j.Bottom_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Prepare for the next set of Incongruent Top
      % Different and Bottom Same trials
      idx.All.ITD = idx.All.ITD + 1;
      idx.All.IBS = idx.All.IBS + 1;
    elseif (i < j)
      % left-shifted aligned
      %
      % Congruent Top Different
      Cf.All.CTD_LS_A(idx.All.CD) =...
          perceptroncompare({Stim.i.Top_LS_A, Stim.j.Top_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Congruent Bottom Different
      Cf.All.CBD_LS_A(idx.All.CD) =...
          perceptroncompare({Stim.i.Bottom_LS_A, Stim.j.Bottom_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %
      % right-shifted aligned
      %
      % Congruent Top Different
      Cf.All.CTD_RS_A(idx.All.CD) =...
          perceptroncompare({Stim.i.Top_RS_A, Stim.j.Top_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Congruent Bottom Different
      Cf.All.CBD_RS_A(idx.All.CD) =...
          perceptroncompare({Stim.i.Bottom_RS_A, Stim.j.Bottom_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %
      % top-left bottom-right misaligned
      %
      % Congruent Top Different
      Cf.All.CTD_TLBR_MA(idx.All.CD) =...
          perceptroncompare({Stim.i.Top_TLBR_MA, Stim.j.Top_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Congruent Bottom Different
      Cf.All.CBD_TLBR_MA(idx.All.CD) =...
          perceptroncompare({Stim.i.Bottom_TLBR_MA,...
                             Stim.j.Bottom_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      %
      % top-right bottom-left misaligned
      %
      % Congruent Top Different
      Cf.All.CTD_TRBL_MA(idx.All.CD) =...
          perceptroncompare({Stim.i.Top_TRBL_MA, Stim.j.Top_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Congruent Bottom Different
      Cf.All.CBD_TRBL_MA(idx.All.CD) =...
          perceptroncompare({Stim.i.Bottom_TRBL_MA,...
                             Stim.j.Bottom_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise);
      %
      % Prepare for the next set of Congruent Same
      % trials
      idx.All.CD = idx.All.CD + 1;
    end
  end
end

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RANDOM SELECTION OF TRIALS %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Randomly select 42 = n.Expr*(n.Expr-1) of each trial type
%
n.TrialsS.All = 42;
% Incongruent Same
r = randperm(n.IS.All);
s = r(1:n.TrialsS.All);
% Top
% left-shifted aligned
CfS.All.ITS_LS_A = Cf.All.ITS_LS_A(s);
% right-shifted aligned
CfS.All.ITS_RS_A = Cf.All.ITS_RS_A(s);
% top-left bottom-right misaligned
CfS.All.ITS_TLBR_MA = Cf.All.ITS_TLBR_MA(s);
% top-right bottom-left misaligned
CfS.All.ITS_TRBL_MA = Cf.All.ITS_TRBL_MA(s);
% Bottom
% left-shifted aligned
CfS.All.IBS_LS_A = Cf.All.IBS_LS_A(s);
% right-shifted aligned
CfS.All.IBS_RS_A = Cf.All.IBS_RS_A(s);
% top-left bottom-right misaligned
CfS.All.IBS_TLBR_MA = Cf.All.IBS_TLBR_MA(s);
% top-right bottom-left misaligned
CfS.All.IBS_TRBL_MA = Cf.All.IBS_TRBL_MA(s);
%
%
% Incongruent Different
r = randperm(n.ID.All);
s = r(1:n.TrialsS.All);
% Top
% left-shifted aligned
CfS.All.ITD_LS_A = Cf.All.ITD_LS_A(s);
% right-shifted aligned
CfS.All.ITD_RS_A = Cf.All.ITD_RS_A(s);
% top-left bottom-right misaligned
CfS.All.ITD_TLBR_MA = Cf.All.ITD_TLBR_MA(s);
% top-right bottom-left misaligned
CfS.All.ITD_TRBL_MA = Cf.All.ITD_TRBL_MA(s);
% Bottom
% left-shifted aligned
CfS.All.IBD_LS_A = Cf.All.IBD_LS_A(s);
% right-shifted aligned
CfS.All.IBD_RS_A = Cf.All.IBD_RS_A(s);
% top-left bottom-right misaligned
CfS.All.IBD_TLBR_MA = Cf.All.IBD_TLBR_MA(s);
% top-right bottom-left misaligned
CfS.All.IBD_TRBL_MA = Cf.All.IBD_TRBL_MA(s);
%
%
% Congruent Same
r = randperm(n.CS.All);
s = r(1:n.TrialsS.All);
% Top
% left-shifted aligned
CfS.All.CTS_LS_A = Cf.All.CTS_LS_A(s);
% right-shifted aligned
CfS.All.CTS_RS_A = Cf.All.CTS_RS_A(s);
% top-left bottom-right misaligned
CfS.All.CTS_TLBR_MA = Cf.All.CTS_TLBR_MA(s);
% top-right bottom-left misaligned
CfS.All.CTS_TRBL_MA = Cf.All.CTS_TRBL_MA(s);
% Bottom
% left-shifted aligned
CfS.All.CBS_LS_A = Cf.All.CBS_LS_A(s);
% right-shifted aligned
CfS.All.CBS_RS_A = Cf.All.CBS_RS_A(s);
% top-left bottom-right misaligned
CfS.All.CBS_TLBR_MA = Cf.All.CBS_TLBR_MA(s);
% top-right bottom-left misaligned
CfS.All.CBS_TRBL_MA = Cf.All.CBS_TRBL_MA(s);
%
%
% Congruent Different
r = randperm(n.CD.All);
s = r(1:n.TrialsS.All);
% Top
% left-shifted aligned
CfS.All.CTD_LS_A = Cf.All.CTD_LS_A(s);
% right-shifted aligned
CfS.All.CTD_RS_A = Cf.All.CTD_RS_A(s);
% top-left bottom-right misaligned
CfS.All.CTD_TLBR_MA = Cf.All.CTD_TLBR_MA(s);
% top-right bottom-left misaligned
CfS.All.CTD_TRBL_MA = Cf.All.CTD_TRBL_MA(s);
% Bottom
% left-shifted aligned
CfS.All.CBD_LS_A = Cf.All.CBD_LS_A(s);
% right-shifted aligned
CfS.All.CBD_RS_A = Cf.All.CBD_RS_A(s);
% top-left bottom-right misaligned
CfS.All.CBD_TLBR_MA = Cf.All.CBD_TLBR_MA(s);
% top-right bottom-left misaligned
CfS.All.CBD_TRBL_MA = Cf.All.CBD_TRBL_MA(s);

%%
%%%%%%%%%%%%%%%%%%%%%%
% CONFUSION MATRICES %
%%%%%%%%%%%%%%%%%%%%%%
% The randomly selected trials are used in this
% computation.
%
% Incongruent Top
% left-shifted aligned
Conf_MxS.All.IT_LS_A(:,:,i_r) =...
    [sum(CfS.All.ITS_LS_A)...
     (n.TrialsS.All - sum(CfS.All.ITS_LS_A));...
     sum(CfS.All.ITD_LS_A)...
     (n.TrialsS.All - sum(CfS.All.ITD_LS_A))];
% right-shifted aligned
Conf_MxS.All.IT_RS_A(:,:,i_r) =...
    [sum(CfS.All.ITS_RS_A)...
     (n.TrialsS.All - sum(CfS.All.ITS_RS_A));...
     sum(CfS.All.ITD_RS_A)...
     (n.TrialsS.All - sum(CfS.All.ITD_RS_A))];
% top-left bottom-right misaligned
Conf_MxS.All.IT_TLBR_MA(:,:,i_r) =...
    [sum(CfS.All.ITS_TLBR_MA)...
     (n.TrialsS.All - sum(CfS.All.ITS_TLBR_MA));...
     sum(CfS.All.ITD_TLBR_MA)...
     (n.TrialsS.All - sum(CfS.All.ITD_TLBR_MA))];
% top-right bottom-left misaligned
Conf_MxS.All.IT_TRBL_MA(:,:,i_r) =...
    [sum(CfS.All.ITS_TRBL_MA)...
     (n.TrialsS.All - sum(CfS.All.ITS_TRBL_MA));...
     sum(CfS.All.ITD_TRBL_MA)...
     (n.TrialsS.All - sum(CfS.All.ITD_TRBL_MA))];
%
% Incongruent Bottom
% left-shifted aligned
Conf_MxS.All.IB_LS_A(:,:,i_r) =...
    [sum(CfS.All.IBS_LS_A)...
     (n.TrialsS.All - sum(CfS.All.IBS_LS_A));...
     sum(CfS.All.IBD_LS_A)...
     (n.TrialsS.All - sum(CfS.All.IBD_LS_A))];
% right-shifted aligned
Conf_MxS.All.IB_RS_A(:,:,i_r) =...
    [sum(CfS.All.IBS_RS_A)...
     (n.TrialsS.All - sum(CfS.All.IBS_RS_A));...
     sum(CfS.All.IBD_RS_A)...
     (n.TrialsS.All - sum(CfS.All.IBD_RS_A))];
% top-left bottom-right misaligned
Conf_MxS.All.IB_TLBR_MA(:,:,i_r) =...
    [sum(CfS.All.IBS_TLBR_MA)...
     (n.TrialsS.All - sum(CfS.All.IBS_TLBR_MA));...
     sum(CfS.All.IBD_TLBR_MA)...
     (n.TrialsS.All - sum(CfS.All.IBD_TLBR_MA))];
% top-right bottom-left misaligned
Conf_MxS.All.IB_TRBL_MA(:,:,i_r) =...
    [sum(CfS.All.IBS_TRBL_MA)...
     (n.TrialsS.All - sum(CfS.All.IBS_TRBL_MA));...
     sum(CfS.All.IBD_TRBL_MA)...
     (n.TrialsS.All - sum(CfS.All.IBD_TRBL_MA))];
%
% Congruent Top
% left-shifted aligned
Conf_MxS.All.CT_LS_A(:,:,i_r) =...
    [sum(CfS.All.CTS_LS_A)...
     (n.TrialsS.All - sum(CfS.All.CTS_LS_A));...
     sum(CfS.All.CTD_LS_A)...
     (n.TrialsS.All - sum(CfS.All.CTD_LS_A))];
% right-shifted aligned
Conf_MxS.All.CT_RS_A(:,:,i_r) =...
    [sum(CfS.All.CTS_RS_A)...
     (n.TrialsS.All - sum(CfS.All.CTS_RS_A));...
     sum(CfS.All.CTD_RS_A)...
     (n.TrialsS.All - sum(CfS.All.CTD_RS_A))];
% top-left bottom-right misaligned
Conf_MxS.All.CT_TLBR_MA(:,:,i_r) =...
    [sum(CfS.All.CTS_TLBR_MA)...
     (n.TrialsS.All - sum(CfS.All.CTS_TLBR_MA));...
     sum(CfS.All.CTD_TLBR_MA)...
     (n.TrialsS.All - sum(CfS.All.CTD_TLBR_MA))];
% top-right bottom-left misaligned
Conf_MxS.All.CT_TRBL_MA(:,:,i_r) =...
    [sum(CfS.All.CTS_TRBL_MA)...
     (n.TrialsS.All - sum(CfS.All.CTS_TRBL_MA));...
     sum(CfS.All.CTD_TRBL_MA)...
     (n.TrialsS.All - sum(CfS.All.CTD_TRBL_MA))];
%
% Congruent Bottom
% left-shifted aligned
Conf_MxS.All.CB_LS_A(:,:,i_r) =...
    [sum(CfS.All.CBS_LS_A)...
     (n.TrialsS.All - sum(CfS.All.CBS_LS_A));...
     sum(CfS.All.CBD_LS_A)...
     (n.TrialsS.All - sum(CfS.All.CBD_LS_A))];
% right-shifted aligned
Conf_MxS.All.CB_RS_A(:,:,i_r) =...
    [sum(CfS.All.CBS_RS_A)...
     (n.TrialsS.All - sum(CfS.All.CBS_RS_A));...
     sum(CfS.All.CBD_RS_A)...
     (n.TrialsS.All - sum(CfS.All.CBD_RS_A))];
% top-left bottom-right misaligned
Conf_MxS.All.CB_TLBR_MA(:,:,i_r) =...
    [sum(CfS.All.CBS_TLBR_MA)...
     (n.TrialsS.All - sum(CfS.All.CBS_TLBR_MA));...
     sum(CfS.All.CBD_TLBR_MA)...
     (n.TrialsS.All - sum(CfS.All.CBD_TLBR_MA))];
% top-right bottom-left misaligned
Conf_MxS.All.CB_TRBL_MA(:,:,i_r) =...
    [sum(CfS.All.CBS_TRBL_MA)...
     (n.TrialsS.All - sum(CfS.All.CBS_TRBL_MA));...
     sum(CfS.All.CBD_TRBL_MA)...
     (n.TrialsS.All - sum(CfS.All.CBD_TRBL_MA))];


%%
%%%%%%%%%
% RATES %
%%%%%%%%%
% Format:
%   COLUMNS:
%   Hit Rate    False Alarm Rate
%
%   ROWS:
%   Incongruent Top
%   Incongruent Bottom
%   Congruent Top
%   Congruent Bottom
%
% left-shifted aligned
RatesS.All.LS_A(:,:,i_t,i_i) = ...
 (1/n.TrialsS.All)*[Conf_MxS.All.IT_LS_A(1,1,i_r)...
                    Conf_MxS.All.IT_LS_A(2,1,i_r);...
                    Conf_MxS.All.IB_LS_A(1,1,i_r)...
                    Conf_MxS.All.IB_LS_A(2,1,i_r);...
                    Conf_MxS.All.CT_LS_A(1,1,i_r)...
                    Conf_MxS.All.CT_LS_A(2,1,i_r);...
                    Conf_MxS.All.CB_LS_A(1,1,i_r)...
                    Conf_MxS.All.CB_LS_A(2,1,i_r)];
% right-shifted aligned
RatesS.All.RS_A(:,:,i_t,i_i) = ...
 (1/n.TrialsS.All)*[Conf_MxS.All.IT_RS_A(1,1,i_r)...
                    Conf_MxS.All.IT_RS_A(2,1,i_r);...
                    Conf_MxS.All.IB_RS_A(1,1,i_r)...
                    Conf_MxS.All.IB_RS_A(2,1,i_r);...
                    Conf_MxS.All.CT_RS_A(1,1,i_r)...
                    Conf_MxS.All.CT_RS_A(2,1,i_r);...
                    Conf_MxS.All.CB_RS_A(1,1,i_r)...
                    Conf_MxS.All.CB_RS_A(2,1,i_r)];
% top-left bottom-right misaligned
RatesS.All.TLBR_MA(:,:,i_t,i_i) = ...
 (1/n.TrialsS.All)*[Conf_MxS.All.IT_TLBR_MA(1,1,i_r)...
                    Conf_MxS.All.IT_TLBR_MA(2,1,i_r);...
                    Conf_MxS.All.IB_TLBR_MA(1,1,i_r)...
                    Conf_MxS.All.IB_TLBR_MA(2,1,i_r);...
                    Conf_MxS.All.CT_TLBR_MA(1,1,i_r)...
                    Conf_MxS.All.CT_TLBR_MA(2,1,i_r);...
                    Conf_MxS.All.CB_TLBR_MA(1,1,i_r)...
                    Conf_MxS.All.CB_TLBR_MA(2,1,i_r)];
% top-right bottom-left misaligned
RatesS.All.TRBL_MA(:,:,i_t,i_i) = ...
 (1/n.TrialsS.All)*[Conf_MxS.All.IT_TRBL_MA(1,1,i_r)...
                    Conf_MxS.All.IT_TRBL_MA(2,1,i_r);...
                    Conf_MxS.All.IB_TRBL_MA(1,1,i_r)...
                    Conf_MxS.All.IB_TRBL_MA(2,1,i_r);...
                    Conf_MxS.All.CT_TRBL_MA(1,1,i_r)...
                    Conf_MxS.All.CT_TRBL_MA(2,1,i_r);...
                    Conf_MxS.All.CB_TRBL_MA(1,1,i_r)...
                    Conf_MxS.All.CB_TRBL_MA(2,1,i_r)];

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIMULATION 2: EXPERIMENT 1 (TANAKA ET AL.) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PREPARING TARGET VECTORS %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   1 - Happy
%   2 - Sad
%   3 - Surprised
%   4 - Angry
%   5 - Disgusted
%   6 - Fearful
%   7 - Neutral

Y_experiment1 =...
    [Expr.Happy*ones(n.StimE1/4,1);
     Expr.Angry*ones(n.StimE1/4,1);
     Expr.Happy*ones(n.StimE1/4,1);
     Expr.Angry*ones(n.StimE1/4,1)];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RUN STIMULI THROUGH PERCEPTRON %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf(1,'%s\n', 'Start of Experiment 1');

[Class.E1(:,i_r), ~, Confidence.E1(:,i_t,i_i)] =...
    perceptronclassify(X_experiment1, Y_experiment1,...
                       perceptronFinal, trainParameters.noise,...
                       [1 4], 'y');
% confidence for trials in which the model is correct
Confidence.E1(:,i_t,i_i) =...
    (Class.E1(:,i_r) == Y_experiment1).*Confidence.E1(:,i_t,i_i);

fprintf(1,'%s\n', 'End of Experiment 1');
disp(' ');

%%
%%%%%%%%%%%%%%%%%%%%%%%%
% EXPERIMENT 1 RESULTS %
%%%%%%%%%%%%%%%%%%%%%%%%
% show performance on left-shifted stimuli
disp([Class.E1(1:n.StimE1/4,i_r)...
      Y_experiment1(1:n.StimE1/4)...
      Class.E1((n.StimE1/4)+1:n.StimE1/2,i_r)...
      Y_experiment1((n.StimE1/4)+1:n.StimE1/2)]);

% show performance on right-shifted stimuli
disp([Class.E1((n.StimE1/2)+1:3*n.StimE1/4,i_r)...
      Y_experiment1((n.StimE1/2)+1:3*n.StimE1/4)...
      Class.E1((3*n.StimE1/4)+1:n.StimE1,i_r)...
      Y_experiment1((3*n.StimE1/4)+1:n.StimE1)]);

% store results
% confusion matrices
for i=1:n.StimE1
    switch i
        % left-shifted faces
        case 1
            % happy top + happy bottom
            Conf_Mx_E1.HappyHappy_LS_A_bottom(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.HappyHappy_LS_A_bottom(i_t, Class.E1(i,i_r)) + 1;
        case 2
            % happy bottom
            Conf_Mx_E1.Happy_Bottom_LS(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.Happy_Bottom_LS(i_t, Class.E1(i,i_r)) + 1;
        case 3                
            % neutral top + happy bottom
            Conf_Mx_E1.NeutralHappy_LS_A_bottom(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.NeutralHappy_LS_A_bottom(i_t, Class.E1(i,i_r)) + 1;
        case 4
            % angry top + happy bottom
            Conf_Mx_E1.AngryHappy_LS_A_bottom(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.AngryHappy_LS_A_bottom(i_t, Class.E1(i,i_r)) + 1;                
        case 5
            % angry top + angry bottom
            Conf_Mx_E1.AngryAngry_LS_A_top(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.AngryAngry_LS_A_top(i_t, Class.E1(i,i_r)) + 1;                
        case 6
            % angry top
            Conf_Mx_E1.Angry_Top_LS(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.Angry_Top_LS(i_t, Class.E1(i,i_r)) + 1;
        case 7
            % angry top + neutral bottom
            Conf_Mx_E1.AngryNeutral_LS_A_top(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.AngryNeutral_LS_A_top(i_t, Class.E1(i,i_r)) + 1;
        case 8
            % angry top + happy bottom
            Conf_Mx_E1.AngryHappy_LS_A_top(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.AngryHappy_LS_A_top(i_t, Class.E1(i,i_r)) + 1;

        % right-shifted faces
        case 9
            % happy top + happy bottom
            Conf_Mx_E1.HappyHappy_RS_A_bottom(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.HappyHappy_RS_A_bottom(i_t, Class.E1(i,i_r)) + 1;
        case 10
            % happy bottom
            Conf_Mx_E1.Happy_Bottom_RS(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.Happy_Bottom_RS(i_t, Class.E1(i,i_r)) + 1;
        case 11
            % neutral top + happy bottom
            Conf_Mx_E1.NeutralHappy_RS_A_bottom(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.NeutralHappy_RS_A_bottom(i_t, Class.E1(i,i_r)) + 1;
        case 12
            % angry top + happy bottom
            Conf_Mx_E1.AngryHappy_RS_A_bottom(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.AngryHappy_RS_A_bottom(i_t, Class.E1(i,i_r)) + 1;                
        case 13
            % angry top + angry bottom
            Conf_Mx_E1.AngryAngry_RS_A_top(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.AngryAngry_RS_A_top(i_t, Class.E1(i,i_r)) + 1;                
        case 14
            % angry top
            Conf_Mx_E1.Angry_Top_RS(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.Angry_Top_RS(i_t, Class.E1(i,i_r)) + 1;
        case 15
            % angry top + neutral bottom
            Conf_Mx_E1.AngryNeutral_RS_A_top(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.AngryNeutral_RS_A_top(i_t, Class.E1(i,i_r)) + 1;
        case 16
            % angry top + happy bottom
            Conf_Mx_E1.AngryHappy_RS_A_top(i_t, Class.E1(i,i_r)) =...
            Conf_Mx_E1.AngryHappy_RS_A_top(i_t, Class.E1(i,i_r)) + 1;
        otherwise
            disp('Error: There should be only 16 stimuli');
    end
end

% overall
% happy top + happy bottom
Conf_Mx_E1.HappyHappy_A_bottom =...
    Conf_Mx_E1.HappyHappy_LS_A_bottom +...
    Conf_Mx_E1.HappyHappy_RS_A_bottom;

% happy bottom
Conf_Mx_E1.Happy_Bottom =...
    Conf_Mx_E1.Happy_Bottom_LS +...
    Conf_Mx_E1.Happy_Bottom_RS;

% neutral top + happy bottom
Conf_Mx_E1.NeutralHappy_A_bottom =...
    Conf_Mx_E1.NeutralHappy_LS_A_bottom +...
    Conf_Mx_E1.NeutralHappy_RS_A_bottom;

% angry top + happy bottom
Conf_Mx_E1.AngryHappy_A_bottom =...
    Conf_Mx_E1.AngryHappy_LS_A_bottom +...
    Conf_Mx_E1.AngryHappy_RS_A_bottom;

% angry top + angry bottom
Conf_Mx_E1.AngryAngry_A_top =...
    Conf_Mx_E1.AngryAngry_LS_A_top +...
    Conf_Mx_E1.AngryAngry_RS_A_top;

% angry top
Conf_Mx_E1.Angry_Top =...
    Conf_Mx_E1.Angry_Top_LS +...
    Conf_Mx_E1.Angry_Top_RS;

% angry top + neutral bottom
Conf_Mx_E1.AngryNeutral_A_top =...
    Conf_Mx_E1.AngryNeutral_LS_A_top +...
    Conf_Mx_E1.AngryNeutral_RS_A_top;

% angry top + happy bottom
Conf_Mx_E1.AngryHappy_A_top =...
    Conf_Mx_E1.AngryHappy_LS_A_top +...
    Conf_Mx_E1.AngryHappy_RS_A_top;

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIMULATION 3: EXPERIMENT 3 (TANAKA ET AL.) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PREPARING TARGET VECTORS %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   1 - Happy
%   2 - Sad
%   3 - Surprised
%   4 - Angry
%   5 - Disgusted
%   6 - Fearful
%   7 - Neutral

Y_experiment3 =...
    [Expr.Happy*ones(n.StimE3/2,1);
     Expr.Angry*ones(n.StimE3/2,1)];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RUN STIMULI THROUGH PERCEPTRON %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf(1,'%s\n', 'Start of Experiment 3');

[Class.E3(:,i_r), ~, Confidence.E3(:,i_t,i_i)] =...
    perceptronclassify(X_experiment3, Y_experiment3,...
                       perceptronFinal, trainParameters.noise,...
                       [1 4], 'y');
% confidence for trials in which the model is correct
Confidence.E3(:,i_t,i_i) =...
    (Class.E3(:,i_r) == Y_experiment3).*Confidence.E3(:,i_t,i_i);

fprintf(1,'%s\n', 'End of Experiment 3');
disp(' ');

%%
%%%%%%%%%%%%%%%%%%%%%%%%
% EXPERIMENT 3 RESULTS %
%%%%%%%%%%%%%%%%%%%%%%%%
disp([Class.E3(1:n.StimE3/2,i_r)...
      Y_experiment3(1:n.StimE3/2)...
      Class.E3((n.StimE3/2)+1:n.StimE3,i_r)...
      Y_experiment3((n.StimE3/2)+1:n.StimE3)]);

% Confusion Matrices
for i=1:n.StimE3
    switch i
        % happy top + happy bottom
        case 1
            % left-shifted
            Conf_Mx_E3.HappyHappy_LS_A_bottom(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.HappyHappy_LS_A_bottom(i_t, Class.E3(i,i_r)) + 1;
        case 2
            % right-shifted
            Conf_Mx_E3.HappyHappy_RS_A_bottom(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.HappyHappy_RS_A_bottom(i_t, Class.E3(i,i_r)) + 1;
        case 3
            % top-left bottom-right misaligned
            Conf_Mx_E3.HappyHappy_TLBR_MA_bottom(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.HappyHappy_TLBR_MA_bottom(i_t, Class.E3(i,i_r)) + 1;
        case 4
            % top-right bottom-left misaligned
            Conf_Mx_E3.HappyHappy_TRBL_MA_bottom(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.HappyHappy_TRBL_MA_bottom(i_t, Class.E3(i,i_r)) + 1;
        
        % angry top + happy bottom
        case 5
            % left-shifted
            Conf_Mx_E3.AngryHappy_LS_A_bottom(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryHappy_LS_A_bottom(i_t, Class.E3(i,i_r)) + 1;                
        case 6
            % right-shifted
            Conf_Mx_E3.AngryHappy_RS_A_bottom(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryHappy_RS_A_bottom(i_t, Class.E3(i,i_r)) + 1;                
        case 7
            % top-left bottom-right misaligned
            Conf_Mx_E3.AngryHappy_TLBR_MA_bottom(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryHappy_TLBR_MA_bottom(i_t, Class.E3(i,i_r)) + 1;
        case 8
            % top-right bottom-left misaligned
            Conf_Mx_E3.AngryHappy_TRBL_MA_bottom(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryHappy_TRBL_MA_bottom(i_t, Class.E3(i,i_r)) + 1;

        % angry top + angry bottom
        case 9
            % left-shifted
            Conf_Mx_E3.AngryAngry_LS_A_top(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryAngry_LS_A_top(i_t, Class.E3(i,i_r)) + 1;
        case 10
            % right-shifted
            Conf_Mx_E3.AngryAngry_RS_A_top(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryAngry_RS_A_top(i_t, Class.E3(i,i_r)) + 1;

        case 11
            % top-left bottom-right misaligned
            Conf_Mx_E3.AngryAngry_TLBR_MA_top(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryAngry_TLBR_MA_top(i_t, Class.E3(i,i_r)) + 1;

        case 12
            % top-right bottom-left misaligned
            Conf_Mx_E3.AngryAngry_TRBL_MA_top(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryAngry_TRBL_MA_top(i_t, Class.E3(i,i_r)) + 1;

        % angry top + happy bottom
        case 13
            % left-shifted
            Conf_Mx_E3.AngryHappy_LS_A_top(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryHappy_LS_A_top(i_t, Class.E3(i,i_r)) + 1;
        case 14                
            % right-shifted
            Conf_Mx_E3.AngryHappy_RS_A_top(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryHappy_RS_A_top(i_t, Class.E3(i,i_r)) + 1;
        case 15
            % top-left bottom-right misaligned
            Conf_Mx_E3.AngryHappy_TLBR_MA_top(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryHappy_TLBR_MA_top(i_t, Class.E3(i,i_r)) + 1;
        case 16
            % top-right bottom-left misaligned
            Conf_Mx_E3.AngryHappy_TRBL_MA_top(i_t, Class.E3(i,i_r)) =...
            Conf_Mx_E3.AngryHappy_TRBL_MA_top(i_t, Class.E3(i,i_r)) + 1;
        otherwise
            disp('Error: There should only be 16 stimuli');
    end
end

%%
% overall
% happy top + happy bottom
%
% aligned
Conf_Mx_E3.HappyHappy_A_bottom =...
    Conf_Mx_E3.HappyHappy_LS_A_bottom +...
    Conf_Mx_E3.HappyHappy_RS_A_bottom;

% misaligned
Conf_Mx_E3.HappyHappy_MA_bottom =...
    Conf_Mx_E3.HappyHappy_TLBR_MA_bottom +...
    Conf_Mx_E3.HappyHappy_TRBL_MA_bottom;

% angry top + happy bottom
%
% aligned
Conf_Mx_E3.AngryHappy_A_bottom =...
    Conf_Mx_E3.AngryHappy_LS_A_bottom +...
    Conf_Mx_E3.AngryHappy_RS_A_bottom;

% misaligned
Conf_Mx_E3.AngryHappy_MA_bottom =...
    Conf_Mx_E3.AngryHappy_TLBR_MA_bottom +...
    Conf_Mx_E3.AngryHappy_TRBL_MA_bottom;

% angry top + angry bottom
%
% aligned
Conf_Mx_E3.AngryAngry_A_top =...
    Conf_Mx_E3.AngryAngry_LS_A_top +...
    Conf_Mx_E3.AngryAngry_RS_A_top;

% misaligned
Conf_Mx_E3.AngryAngry_MA_top =...
    Conf_Mx_E3.AngryAngry_TLBR_MA_top +...
    Conf_Mx_E3.AngryAngry_TRBL_MA_top;

% angry top + happy bottom
%
% aligned
Conf_Mx_E3.AngryHappy_A_top =...
    Conf_Mx_E3.AngryHappy_LS_A_top +...
    Conf_Mx_E3.AngryHappy_RS_A_top;

% misaligned
Conf_Mx_E3.AngryHappy_MA_top =...
    Conf_Mx_E3.AngryHappy_TLBR_MA_top +...
    Conf_Mx_E3.AngryHappy_TRBL_MA_top;