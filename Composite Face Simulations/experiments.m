% Script
%
% EXPERIMENTS
%   Notes:
%   06/27/2013
%     - simulations 1, 2 and 3
%
%   Functions called:
%       perceptroncompare
%       perceptronclassify

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIMULATION 1 (COMPLETE COMPOSITE PARADIGM) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Indices used to keep track of trial types
idx.all.ITS = 1;
idx.all.IBD = 1;
idx.all.ITD = 1;
idx.all.IBS = 1;
idx.all.CS = 1;
idx.all.CD = 1;


cd ..
cd([pwd, '/Neural Network'])

fprintf(1,'%s\n', 'Start of simulation 1 (Complete Composite Paradigm)');
%%
% Same-different judgments
%
% 1 - Same
% 0 - Different
for i=1:n.compositeFaces
  for j=1:n.compositeFaces
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Exploiting the way the stimuli are ordered
    %
    % Subset of 6 of stimulus i or j: ceil((i or j)/6)
    subset.size = 6;
    subset.i = ceil(i/subset.size);
    subset.j = ceil(j/subset.size);
    % Position of stimulus i or j in subset:
    % mod(((i or j)-1),6) + 1
    position.i = mod((i-1),subset.size) + 1;
    position.j = mod((j-1),subset.size) + 1;
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%
    % SELECTING STIMULI %
    %%%%%%%%%%%%%%%%%%%%%
    for i_p=1:n.perceptrons
        % left-shifted aligned
        CCP.i.top_LS_A{i_p} = stimulus{1}.top_LS_A{i_p}(i,:);
        CCP.j.top_LS_A{i_p} = stimulus{1}.top_LS_A{i_p}(j,:);

        CCP.i.bottom_LS_A{i_p} = stimulus{1}.bottom_LS_A{i_p}(i,:);
        CCP.j.bottom_LS_A{i_p} = stimulus{1}.bottom_LS_A{i_p}(j,:);

        % right-shifted aligned
        CCP.i.top_RS_A{i_p} = stimulus{1}.top_RS_A{i_p}(i,:);
        CCP.j.top_RS_A{i_p} = stimulus{1}.top_RS_A{i_p}(j,:);

        CCP.i.bottom_RS_A{i_p} = stimulus{1}.bottom_RS_A{i_p}(i,:);
        CCP.j.bottom_RS_A{i_p} = stimulus{1}.bottom_RS_A{i_p}(j,:);

        % top-left bottom-right misaligned
        CCP.i.top_TLBR_MA{i_p} = stimulus{1}.top_TLBR_MA{i_p}(i,:);
        CCP.j.top_TLBR_MA{i_p} = stimulus{1}.top_TLBR_MA{i_p}(j,:);

        CCP.i.bottom_TLBR_MA{i_p} = stimulus{1}.bottom_TLBR_MA{i_p}(i,:);
        CCP.j.bottom_TLBR_MA{i_p} = stimulus{1}.bottom_TLBR_MA{i_p}(j,:);

        % top-right bottom-left misaligned
        CCP.i.top_TRBL_MA{i_p} = stimulus{1}.top_TRBL_MA{i_p}(i,:);
        CCP.j.top_TRBL_MA{i_p} = stimulus{1}.top_TRBL_MA{i_p}(j,:);

        CCP.i.bottom_TRBL_MA{i_p} = stimulus{1}.bottom_TRBL_MA{i_p}(i,:);
        CCP.j.bottom_TRBL_MA{i_p} = stimulus{1}.bottom_TRBL_MA{i_p}(j,:);
    end

    if (i == j)
      % left-shifted aligned
      %
      % Congruent Top Same
      Trials.all.CTS_LS_A(idx.all.CS) =...
          perceptroncompare({CCP.i.top_LS_A,...
                             CCP.j.top_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Congruent Bottom Same
      Trials.all.CBS_LS_A(idx.all.CS) =...
          perceptroncompare({CCP.i.bottom_LS_A,...
                             CCP.j.bottom_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %
      % right-shifted aligned
      %
      % Congruent Top Same
      Trials.all.CTS_RS_A(idx.all.CS) =...
          perceptroncompare({CCP.i.top_RS_A,...
                             CCP.j.top_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Congruent Bottom Same
      Trials.all.CBS_RS_A(idx.all.CS) =...
          perceptroncompare({CCP.i.bottom_RS_A,...
                             CCP.j.bottom_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %
      % top-left bottom-right misaligned
      %
      % Congruent Top Same
      Trials.all.CTS_TLBR_MA(idx.all.CS) =...
          perceptroncompare({CCP.i.top_TLBR_MA,...
                             CCP.j.top_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Congruent Bottom Same
      Trials.all.CBS_TLBR_MA(idx.all.CS) =...
          perceptroncompare({CCP.i.bottom_TLBR_MA,...
                             CCP.j.bottom_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %                                    
      % top-right bottom-left misaligned
      %
      % Congruent Top Same
      Trials.all.CTS_TRBL_MA(idx.all.CS) =...
          perceptroncompare({CCP.i.top_TRBL_MA,...
                             CCP.j.top_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Congruent Bottom Same
      Trials.all.CBS_TRBL_MA(idx.all.CS) =...
          perceptroncompare({CCP.i.bottom_TRBL_MA,...
                             CCP.j.bottom_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      % Prepare for the next set of Congruent Same
      % trials
      idx.all.CS = idx.all.CS + 1;
    elseif ((subset.i == subset.j) && (i < j))
      % left-shifted aligned
      %
      % Incongruent Top Same
      Trials.all.ITS_LS_A(idx.all.ITS) =...
          perceptroncompare({CCP.i.top_LS_A,...
                             CCP.j.top_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Incongruent Bottom Different
      Trials.all.IBD_LS_A(idx.all.IBD) =...
          perceptroncompare({CCP.i.bottom_LS_A,...
                             CCP.j.bottom_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %
      % right-shifted aligned
      %
      % Incongruent Top Same
      Trials.all.ITS_RS_A(idx.all.ITS) =...
          perceptroncompare({CCP.i.top_RS_A,...
                             CCP.j.top_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Incongruent Bottom Different
      Trials.all.IBD_RS_A(idx.all.IBD) =...
          perceptroncompare({CCP.i.bottom_RS_A,...
                             CCP.j.bottom_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %
      % top-left bottom-right misaligned
      %
      % Incongruent Top Same
      Trials.all.ITS_TLBR_MA(idx.all.ITS) =...
          perceptroncompare({CCP.i.top_TLBR_MA,...
                             CCP.j.top_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Incongruent Bottom Different
      Trials.all.IBD_TLBR_MA(idx.all.IBD) =...
          perceptroncompare({CCP.i.bottom_TLBR_MA,...
                             CCP.j.bottom_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %
      % top-right bottom-left misaligned
      %
      % Incongruent Top Same
      Trials.all.ITS_TRBL_MA(idx.all.ITS) =...
          perceptroncompare({CCP.i.top_TRBL_MA,...
                             CCP.j.top_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Incongruent Bottom Different
      Trials.all.IBD_TRBL_MA(idx.all.IBD) =...
          perceptroncompare({CCP.i.bottom_TRBL_MA,...
                             CCP.j.bottom_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      % Prepare for the next set of Incongruent Top
      % Same and Bottom Different trials
      idx.all.ITS = idx.all.ITS + 1;
      idx.all.IBD = idx.all.IBD + 1;
    elseif ((((subset.i <= position.i) && ...
           (subset.j ~= (position.i + 1)) && ...
           (subset.j <= position.j) && ...
           (position.i == position.j))...
           ||...
           ((subset.i <= position.i) && ...
           (subset.j ~= (position.i + 1)) && ...
           (subset.j > position.j) && ...
           ((position.i + 1) == position.j))...
           ||...
           ((subset.i > position.i) && ...
           (subset.j ~= position.i) && ...
           (subset.j > position.j) && ...
           (position.i == position.j)))...
           &&...
           (i < j))
      % left-shifted aligned
      %
      % Incongruent Top Different
      Trials.all.ITD_LS_A(idx.all.ITD) =...
          perceptroncompare({CCP.i.top_LS_A,...
                             CCP.j.top_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Incongruent Bottom Same
      Trials.all.IBS_LS_A(idx.all.IBS) =...
          perceptroncompare({CCP.i.bottom_LS_A,...
                             CCP.j.bottom_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %
      % right-shifted aligned
      %
      % Incongruent Top Different
      Trials.all.ITD_RS_A(idx.all.ITD) =...
          perceptroncompare({CCP.i.top_RS_A,...
                             CCP.j.top_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Incongruent Bottom Same
      Trials.all.IBS_RS_A(idx.all.IBS) =...
          perceptroncompare({CCP.i.bottom_RS_A,...
                             CCP.j.bottom_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %
      % top-left bottom-right misaligned
      %
      % Incongruent Top Different
      Trials.all.ITD_TLBR_MA(idx.all.ITD) =...
          perceptroncompare({CCP.i.top_TLBR_MA,...
                             CCP.j.top_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Incongruent Bottom Same
      Trials.all.IBS_TLBR_MA(idx.all.IBS) =...
          perceptroncompare({CCP.i.bottom_TLBR_MA,...
                             CCP.j.bottom_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %
      % top-right bottom-left misaligned
      %
      % Incongruent Top Different
      Trials.all.ITD_TRBL_MA(idx.all.ITD) =...
          perceptroncompare({CCP.i.top_TRBL_MA,...
                             CCP.j.top_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Incongruent Bottom Same
      Trials.all.IBS_TRBL_MA(idx.all.IBS) =...
          perceptroncompare({CCP.i.bottom_TRBL_MA,...
                             CCP.j.bottom_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      % Prepare for the next set of Incongruent Top
      % Different and Bottom Same trials
      idx.all.ITD = idx.all.ITD + 1;
      idx.all.IBS = idx.all.IBS + 1;
    elseif (i < j)
      % left-shifted aligned
      %
      % Congruent Top Different
      Trials.all.CTD_LS_A(idx.all.CD) =...
          perceptroncompare({CCP.i.top_LS_A,...
                             CCP.j.top_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Congruent Bottom Different
      Trials.all.CBD_LS_A(idx.all.CD) =...
          perceptroncompare({CCP.i.bottom_LS_A,...
                             CCP.j.bottom_LS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %
      % right-shifted aligned
      %
      % Congruent Top Different
      Trials.all.CTD_RS_A(idx.all.CD) =...
          perceptroncompare({CCP.i.top_RS_A,...
                             CCP.j.top_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Congruent Bottom Different
      Trials.all.CBD_RS_A(idx.all.CD) =...
          perceptroncompare({CCP.i.bottom_RS_A,...
                             CCP.j.bottom_RS_A},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %
      % top-left bottom-right misaligned
      %
      % Congruent Top Different
      Trials.all.CTD_TLBR_MA(idx.all.CD) =...
          perceptroncompare({CCP.i.top_TLBR_MA,...
                             CCP.j.top_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Congruent Bottom Different
      Trials.all.CBD_TLBR_MA(idx.all.CD) =...
          perceptroncompare({CCP.i.bottom_TLBR_MA,...
                             CCP.j.bottom_TLBR_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      %
      % top-right bottom-left misaligned
      %
      % Congruent Top Different
      Trials.all.CTD_TRBL_MA(idx.all.CD) =...
          perceptroncompare({CCP.i.top_TRBL_MA,...
                             CCP.j.top_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      % Congruent Bottom Different
      Trials.all.CBD_TRBL_MA(idx.all.CD) =...
          perceptroncompare({CCP.i.bottom_TRBL_MA,...
                             CCP.j.bottom_TRBL_MA},...
                            perceptronFinal,...
                            trainParameters.noise,...
                            category.CCP);
      %
      % Prepare for the next set of Congruent Same
      % trials
      idx.all.CD = idx.all.CD + 1;
    end
  end
end

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIMULATION 2 (TANAKA ET AL. EXPERIMENT 1) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Prepare Experiment 1 targets
perceptronTarget.experiment1 =...
    [expression.happy*ones(n.stimuliExperiment1/4,1);
     expression.angry*ones(n.stimuliExperiment1/4,1);
     expression.happy*ones(n.stimuliExperiment1/4,1);
     expression.angry*ones(n.stimuliExperiment1/4,1)];

% Experiment 1 proper
fprintf(1,'%s\n', 'Start of simulation 2 (Tanaka et al. Experiment 1)');
[perceptronOutput.experiment1(:,i_r),...
 ~,...
 confidence.experiment1(:,i_t,i_i)] =...
perceptronclassify(perceptronInput.experiment1,...
                   perceptronTarget.experiment1,...
                   perceptronFinal,...
                   trainParameters.noise,...
                   category.experiment1, 'y');
% Confidence for trials in which the model is correct (as computed
% by Tanaka et al.)
confidence.experiment1(:,i_t,i_i) =...
    (perceptronOutput.experiment1(:,i_r) ==...
     perceptronTarget.experiment1).*...
     confidence.experiment1(:,i_t,i_i);
fprintf(1,'%s\n', 'End of simulation 2 (Tanaka et al. Experiment 1)');
disp(' ');

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIMULATION 3 (TANAKA ET AL. EXPERIMENT 3) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Prepare Experiment 3 targets
perceptronTarget.experiment3 =...
    [expression.happy*ones(n.stimuliExperiment3/2,1);
     expression.angry*ones(n.stimuliExperiment3/2,1)];

% Experiment 1 proper
fprintf(1,'%s\n', 'Start of simulation 3 (Tanaka et al. Experiment 3)');
[perceptronOutput.experiment3(:,i_r),...
 ~,...
 confidence.experiment3(:,i_t,i_i)] =...
perceptronclassify(perceptronInput.experiment3,...
                   perceptronTarget.experiment3,...
                   perceptronFinal,...
                   trainParameters.noise,...
                   category.experiment3, 'y');
% Confidence for trials in which the model is correct (as computed
% by Tanaka et al.)
confidence.experiment3(:,i_t,i_i) =...
    (perceptronOutput.experiment3(:,i_r) ==...
     perceptronTarget.experiment3).*...
     confidence.experiment3(:,i_t,i_i);
fprintf(1,'%s\n', 'End of simulation 3 (Tanaka et al. Experiment 3)');
disp(' ');


% Tidy up
cd ..
cd([pwd, '/Composite Face Simulations'])