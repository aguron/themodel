% Script
%
% EXPERIMENTSRESULTS
%   Notes:
%   06/27/2013
%     - display results and compute confusion matrices

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIMULATION 1 (COMPLETE COMPOSITE PARADIGM) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Randomly select N.SELECTEDTRIALS.ALL of each trial type (Please
% see DEFINECONSTANTS)
%
% Incongruent Same
r = randperm(n.IS.all);
s = r(1:n.selectedTrials.all);
% Top
% left-shifted aligned
selectedTrials.all.ITS_LS_A = Trials.all.ITS_LS_A(s);
% right-shifted aligned
selectedTrials.all.ITS_RS_A = Trials.all.ITS_RS_A(s);
% top-left bottom-right misaligned
selectedTrials.all.ITS_TLBR_MA = Trials.all.ITS_TLBR_MA(s);
% top-right bottom-left misaligned
selectedTrials.all.ITS_TRBL_MA = Trials.all.ITS_TRBL_MA(s);
% Bottom
% left-shifted aligned
selectedTrials.all.IBS_LS_A = Trials.all.IBS_LS_A(s);
% right-shifted aligned
selectedTrials.all.IBS_RS_A = Trials.all.IBS_RS_A(s);
% top-left bottom-right misaligned
selectedTrials.all.IBS_TLBR_MA = Trials.all.IBS_TLBR_MA(s);
% top-right bottom-left misaligned
selectedTrials.all.IBS_TRBL_MA = Trials.all.IBS_TRBL_MA(s);
%
%
% Incongruent Different
r = randperm(n.ID.all);
s = r(1:n.selectedTrials.all);
% Top
% left-shifted aligned
selectedTrials.all.ITD_LS_A = Trials.all.ITD_LS_A(s);
% right-shifted aligned
selectedTrials.all.ITD_RS_A = Trials.all.ITD_RS_A(s);
% top-left bottom-right misaligned
selectedTrials.all.ITD_TLBR_MA = Trials.all.ITD_TLBR_MA(s);
% top-right bottom-left misaligned
selectedTrials.all.ITD_TRBL_MA = Trials.all.ITD_TRBL_MA(s);
% Bottom
% left-shifted aligned
selectedTrials.all.IBD_LS_A = Trials.all.IBD_LS_A(s);
% right-shifted aligned
selectedTrials.all.IBD_RS_A = Trials.all.IBD_RS_A(s);
% top-left bottom-right misaligned
selectedTrials.all.IBD_TLBR_MA = Trials.all.IBD_TLBR_MA(s);
% top-right bottom-left misaligned
selectedTrials.all.IBD_TRBL_MA = Trials.all.IBD_TRBL_MA(s);
%
%
% Congruent Same
r = randperm(n.CS.all);
s = r(1:n.selectedTrials.all);
% Top
% left-shifted aligned
selectedTrials.all.CTS_LS_A = Trials.all.CTS_LS_A(s);
% right-shifted aligned
selectedTrials.all.CTS_RS_A = Trials.all.CTS_RS_A(s);
% top-left bottom-right misaligned
selectedTrials.all.CTS_TLBR_MA = Trials.all.CTS_TLBR_MA(s);
% top-right bottom-left misaligned
selectedTrials.all.CTS_TRBL_MA = Trials.all.CTS_TRBL_MA(s);
% Bottom
% left-shifted aligned
selectedTrials.all.CBS_LS_A = Trials.all.CBS_LS_A(s);
% right-shifted aligned
selectedTrials.all.CBS_RS_A = Trials.all.CBS_RS_A(s);
% top-left bottom-right misaligned
selectedTrials.all.CBS_TLBR_MA = Trials.all.CBS_TLBR_MA(s);
% top-right bottom-left misaligned
selectedTrials.all.CBS_TRBL_MA = Trials.all.CBS_TRBL_MA(s);
%
%
% Congruent Different
r = randperm(n.CD.all);
s = r(1:n.selectedTrials.all);
% Top
% left-shifted aligned
selectedTrials.all.CTD_LS_A = Trials.all.CTD_LS_A(s);
% right-shifted aligned
selectedTrials.all.CTD_RS_A = Trials.all.CTD_RS_A(s);
% top-left bottom-right misaligned
selectedTrials.all.CTD_TLBR_MA = Trials.all.CTD_TLBR_MA(s);
% top-right bottom-left misaligned
selectedTrials.all.CTD_TRBL_MA = Trials.all.CTD_TRBL_MA(s);
% Bottom
% left-shifted aligned
selectedTrials.all.CBD_LS_A = Trials.all.CBD_LS_A(s);
% right-shifted aligned
selectedTrials.all.CBD_RS_A = Trials.all.CBD_RS_A(s);
% top-left bottom-right misaligned
selectedTrials.all.CBD_TLBR_MA = Trials.all.CBD_TLBR_MA(s);
% top-right bottom-left misaligned
selectedTrials.all.CBD_TRBL_MA = Trials.all.CBD_TRBL_MA(s);

% Tidy up
clear r s

% Compute Confusion matrices from selected trials
%
% Incongruent Top
% left-shifted aligned
confusionMatrix.all.IT_LS_A(:,:,i_r) =...
    [sum(selectedTrials.all.ITS_LS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.ITS_LS_A));...
     sum(selectedTrials.all.ITD_LS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.ITD_LS_A))];
% right-shifted aligned
confusionMatrix.all.IT_RS_A(:,:,i_r) =...
    [sum(selectedTrials.all.ITS_RS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.ITS_RS_A));...
     sum(selectedTrials.all.ITD_RS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.ITD_RS_A))];
% top-left bottom-right misaligned
confusionMatrix.all.IT_TLBR_MA(:,:,i_r) =...
    [sum(selectedTrials.all.ITS_TLBR_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.ITS_TLBR_MA));...
     sum(selectedTrials.all.ITD_TLBR_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.ITD_TLBR_MA))];
% top-right bottom-left misaligned
confusionMatrix.all.IT_TRBL_MA(:,:,i_r) =...
    [sum(selectedTrials.all.ITS_TRBL_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.ITS_TRBL_MA));...
     sum(selectedTrials.all.ITD_TRBL_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.ITD_TRBL_MA))];
%
% Incongruent Bottom
% left-shifted aligned
confusionMatrix.all.IB_LS_A(:,:,i_r) =...
    [sum(selectedTrials.all.IBS_LS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.IBS_LS_A));...
     sum(selectedTrials.all.IBD_LS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.IBD_LS_A))];
% right-shifted aligned
confusionMatrix.all.IB_RS_A(:,:,i_r) =...
    [sum(selectedTrials.all.IBS_RS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.IBS_RS_A));...
     sum(selectedTrials.all.IBD_RS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.IBD_RS_A))];
% top-left bottom-right misaligned
confusionMatrix.all.IB_TLBR_MA(:,:,i_r) =...
    [sum(selectedTrials.all.IBS_TLBR_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.IBS_TLBR_MA));...
     sum(selectedTrials.all.IBD_TLBR_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.IBD_TLBR_MA))];
% top-right bottom-left misaligned
confusionMatrix.all.IB_TRBL_MA(:,:,i_r) =...
    [sum(selectedTrials.all.IBS_TRBL_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.IBS_TRBL_MA));...
     sum(selectedTrials.all.IBD_TRBL_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.IBD_TRBL_MA))];
%
% Congruent Top
% left-shifted aligned
confusionMatrix.all.CT_LS_A(:,:,i_r) =...
    [sum(selectedTrials.all.CTS_LS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.CTS_LS_A));...
     sum(selectedTrials.all.CTD_LS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.CTD_LS_A))];
% right-shifted aligned
confusionMatrix.all.CT_RS_A(:,:,i_r) =...
    [sum(selectedTrials.all.CTS_RS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.CTS_RS_A));...
     sum(selectedTrials.all.CTD_RS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.CTD_RS_A))];
% top-left bottom-right misaligned
confusionMatrix.all.CT_TLBR_MA(:,:,i_r) =...
    [sum(selectedTrials.all.CTS_TLBR_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.CTS_TLBR_MA));...
     sum(selectedTrials.all.CTD_TLBR_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.CTD_TLBR_MA))];
% top-right bottom-left misaligned
confusionMatrix.all.CT_TRBL_MA(:,:,i_r) =...
    [sum(selectedTrials.all.CTS_TRBL_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.CTS_TRBL_MA));...
     sum(selectedTrials.all.CTD_TRBL_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.CTD_TRBL_MA))];
%
% Congruent Bottom
% left-shifted aligned
confusionMatrix.all.CB_LS_A(:,:,i_r) =...
    [sum(selectedTrials.all.CBS_LS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.CBS_LS_A));...
     sum(selectedTrials.all.CBD_LS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.CBD_LS_A))];
% right-shifted aligned
confusionMatrix.all.CB_RS_A(:,:,i_r) =...
    [sum(selectedTrials.all.CBS_RS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.CBS_RS_A));...
     sum(selectedTrials.all.CBD_RS_A)...
     (n.selectedTrials.all - sum(selectedTrials.all.CBD_RS_A))];
% top-left bottom-right misaligned
confusionMatrix.all.CB_TLBR_MA(:,:,i_r) =...
    [sum(selectedTrials.all.CBS_TLBR_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.CBS_TLBR_MA));...
     sum(selectedTrials.all.CBD_TLBR_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.CBD_TLBR_MA))];
% top-right bottom-left misaligned
confusionMatrix.all.CB_TRBL_MA(:,:,i_r) =...
    [sum(selectedTrials.all.CBS_TRBL_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.CBS_TRBL_MA));...
     sum(selectedTrials.all.CBD_TRBL_MA)...
     (n.selectedTrials.all - sum(selectedTrials.all.CBD_TRBL_MA))];

% Rates
%
% Format:
%   COLUMNS:
%       HIT RATE    FALSE ALARM RATE
%
%   ROWS:
%       INCONGRUENT TOP
%       INCONGRUENT BOTTOM
%       CONGRUENT TOP
%       CONGRUENT BOTTOM
%
% left-shifted aligned
rates.all.LS_A(:,:,i_t,i_i) = ...
 (1/n.selectedTrials.all)*[confusionMatrix.all.IT_LS_A(1,1,i_r)...
                           confusionMatrix.all.IT_LS_A(2,1,i_r);...
                           confusionMatrix.all.IB_LS_A(1,1,i_r)...
                           confusionMatrix.all.IB_LS_A(2,1,i_r);...
                           confusionMatrix.all.CT_LS_A(1,1,i_r)...
                           confusionMatrix.all.CT_LS_A(2,1,i_r);...
                           confusionMatrix.all.CB_LS_A(1,1,i_r)...
                           confusionMatrix.all.CB_LS_A(2,1,i_r)];

% right-shifted aligned
rates.all.RS_A(:,:,i_t,i_i) = ...
 (1/n.selectedTrials.all)*[confusionMatrix.all.IT_RS_A(1,1,i_r)...
                           confusionMatrix.all.IT_RS_A(2,1,i_r);...
                           confusionMatrix.all.IB_RS_A(1,1,i_r)...
                           confusionMatrix.all.IB_RS_A(2,1,i_r);...
                           confusionMatrix.all.CT_RS_A(1,1,i_r)...
                           confusionMatrix.all.CT_RS_A(2,1,i_r);...
                           confusionMatrix.all.CB_RS_A(1,1,i_r)...
                           confusionMatrix.all.CB_RS_A(2,1,i_r)];

% top-left bottom-right misaligned
rates.all.TLBR_MA(:,:,i_t,i_i) = ...
 (1/n.selectedTrials.all)*[confusionMatrix.all.IT_TLBR_MA(1,1,i_r)...
                           confusionMatrix.all.IT_TLBR_MA(2,1,i_r);...
                           confusionMatrix.all.IB_TLBR_MA(1,1,i_r)...
                           confusionMatrix.all.IB_TLBR_MA(2,1,i_r);...
                           confusionMatrix.all.CT_TLBR_MA(1,1,i_r)...
                           confusionMatrix.all.CT_TLBR_MA(2,1,i_r);...
                           confusionMatrix.all.CB_TLBR_MA(1,1,i_r)...
                           confusionMatrix.all.CB_TLBR_MA(2,1,i_r)];
                
% top-right bottom-left misaligned
rates.all.TRBL_MA(:,:,i_t,i_i) = ...
 (1/n.selectedTrials.all)*[confusionMatrix.all.IT_TRBL_MA(1,1,i_r)...
                           confusionMatrix.all.IT_TRBL_MA(2,1,i_r);...
                           confusionMatrix.all.IB_TRBL_MA(1,1,i_r)...
                           confusionMatrix.all.IB_TRBL_MA(2,1,i_r);...
                           confusionMatrix.all.CT_TRBL_MA(1,1,i_r)...
                           confusionMatrix.all.CT_TRBL_MA(2,1,i_r);...
                           confusionMatrix.all.CB_TRBL_MA(1,1,i_r)...
                           confusionMatrix.all.CB_TRBL_MA(2,1,i_r)];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIMULATION 2 (TANAKA ET AL. EXPERIMENT 1) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Display results
%
% left-shifted stimuli
disp([perceptronTarget.experiment1(1:n.stimuliExperiment1/4)...
      perceptronOutput.experiment1(1:n.stimuliExperiment1/4, i_r)...
      perceptronTarget.experiment1((n.stimuliExperiment1/4)+1:...
                                   n.stimuliExperiment1/2)...
      perceptronOutput.experiment1((n.stimuliExperiment1/4)+1:...
                                   n.stimuliExperiment1/2, i_r)]);


% right-shifted stimuli
disp([perceptronTarget.experiment1((n.stimuliExperiment1/2)+1:...
                                   3*n.stimuliExperiment1/4)...
      perceptronOutput.experiment1((n.stimuliExperiment1/2)+1:...
                                   3*n.stimuliExperiment1/4, i_r)...
      perceptronTarget.experiment1((3*n.stimuliExperiment1/4)+1:...
                                   n.stimuliExperiment1)...
      perceptronOutput.experiment1((3*n.stimuliExperiment1/4)+1:...
                                   n.stimuliExperiment1, i_r)]);


% Confusion matrices
for i=1:n.stimuliExperiment1
    switch i
        % left-shifted faces
        case 1
            % happy top + happy bottom
            confusionVectors.E1.happyHappy_LS_A_bottom(i_t,...
                        perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.happyHappy_LS_A_bottom(i_t,...
                        perceptronOutput.experiment1(i,i_r)) + 1;
        case 2
            % happy bottom
            confusionVectors.E1.happyBottom_LS(i_t,...
                perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.happyBottom_LS(i_t,...
                perceptronOutput.experiment1(i,i_r)) + 1;
        case 3
            % neutral top + happy bottom
            confusionVectors.E1.neutralHappy_LS_A_bottom(i_t,...
                         perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.neutralHappy_LS_A_bottom(i_t,...
                         perceptronOutput.experiment1(i,i_r)) + 1;
        case 4
            % angry top + happy bottom
            confusionVectors.E1.angryHappy_LS_A_bottom(i_t,...
                        perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.angryHappy_LS_A_bottom(i_t,...
                        perceptronOutput.experiment1(i,i_r)) + 1;
        case 5
            % angry top + angry bottom
            confusionVectors.E1.angryAngry_LS_A_top(i_t,...
                        perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.angryAngry_LS_A_top(i_t,...
                        perceptronOutput.experiment1(i,i_r)) + 1;
        case 6
            % angry top
            confusionVectors.E1.angryTop_LS(i_t,...
                perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.angryTop_LS(i_t,...
                perceptronOutput.experiment1(i,i_r)) + 1;
        case 7
            % angry top + neutral bottom
            confusionVectors.E1.angryNeutral_LS_A_top(i_t,...
                      perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.angryNeutral_LS_A_top(i_t,...
                      perceptronOutput.experiment1(i,i_r)) + 1;
        case 8
            % angry top + happy bottom
            confusionVectors.E1.angryHappy_LS_A_top(i_t,...
                      perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.angryHappy_LS_A_top(i_t,...
                      perceptronOutput.experiment1(i,i_r)) + 1;
                  
        % right-shifted faces
        case 9
            % happy top + happy bottom
            confusionVectors.E1.happyHappy_RS_A_bottom(i_t,...
                        perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.happyHappy_RS_A_bottom(i_t,...
                        perceptronOutput.experiment1(i,i_r)) + 1;
        case 10
            % happy bottom
            confusionVectors.E1.happyBottom_RS(i_t,...
                        perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.happyBottom_RS(i_t,...
                        perceptronOutput.experiment1(i,i_r)) + 1;
        case 11
            % neutral top + happy bottom
            confusionVectors.E1.neutralHappy_RS_A_bottom(i_t,...
                        perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.neutralHappy_RS_A_bottom(i_t,...
                        perceptronOutput.experiment1(i,i_r)) + 1;
        case 12
            % angry top + happy bottom
            confusionVectors.E1.angryHappy_RS_A_bottom(i_t,...
                        perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.angryHappy_RS_A_bottom(i_t,...
                        perceptronOutput.experiment1(i,i_r)) + 1;
        case 13
            % angry top + angry bottom
            confusionVectors.E1.angryAngry_RS_A_top(i_t,...
                        perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.angryAngry_RS_A_top(i_t,...
                        perceptronOutput.experiment1(i,i_r)) + 1;
        case 14
            % angry top
            confusionVectors.E1.angryTop_RS(i_t,...
                        perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.angryTop_RS(i_t,...
                        perceptronOutput.experiment1(i,i_r)) + 1;
        case 15
            % angry top + neutral bottom
            confusionVectors.E1.angryNeutral_RS_A_top(i_t,...
                        perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.angryNeutral_RS_A_top(i_t,...
                        perceptronOutput.experiment1(i,i_r)) + 1;
        case 16
            % angry top + happy bottom
            confusionVectors.E1.angryHappy_RS_A_top(i_t,...
                        perceptronOutput.experiment1(i,i_r)) =...
            confusionVectors.E1.angryHappy_RS_A_top(i_t,...
                        perceptronOutput.experiment1(i,i_r)) + 1;
        otherwise
            disp('Error: There should be only 16 stimuli');
    end
end

% overall
% happy top + happy bottom
confusionVectors.E1.happyHappy_A_bottom =...
    confusionVectors.E1.happyHappy_LS_A_bottom +...
    confusionVectors.E1.happyHappy_RS_A_bottom;

% happy bottom
confusionVectors.E1.happyBottom =...
    confusionVectors.E1.happyBottom_LS +...
    confusionVectors.E1.happyBottom_RS;

% neutral top + happy bottom
confusionVectors.E1.neutralHappy_A_bottom =...
    confusionVectors.E1.neutralHappy_LS_A_bottom +...
    confusionVectors.E1.neutralHappy_RS_A_bottom;

% angry top + happy bottom
confusionVectors.E1.angryHappy_A_bottom =...
    confusionVectors.E1.angryHappy_LS_A_bottom +...
    confusionVectors.E1.angryHappy_RS_A_bottom;

% angry top + angry bottom
confusionVectors.E1.angryAngry_A_top =...
    confusionVectors.E1.angryAngry_LS_A_top +...
    confusionVectors.E1.angryAngry_RS_A_top;

% angry top
confusionVectors.E1.angryTop =...
    confusionVectors.E1.angryTop_LS +...
    confusionVectors.E1.angryTop_RS;

% angry top + neutral bottom
confusionVectors.E1.angryNeutral_A_top =...
    confusionVectors.E1.angryNeutral_LS_A_top +...
    confusionVectors.E1.angryNeutral_RS_A_top;

% angry top + happy bottom
confusionVectors.E1.angryHappy_A_top =...
    confusionVectors.E1.angryHappy_LS_A_top +...
    confusionVectors.E1.angryHappy_RS_A_top;

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIMULATION 3 (TANAKA ET AL. EXPERIMENT 3) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Display results
disp([perceptronTarget.experiment3(1:n.stimuliExperiment3/2)...
      perceptronOutput.experiment3(1:n.stimuliExperiment3/2, i_r)...
      perceptronTarget.experiment3((n.stimuliExperiment3/2) + 1:...
                                   n.stimuliExperiment1)...
      perceptronOutput.experiment3((n.stimuliExperiment3/2) + 1:...
                                   n.stimuliExperiment3, i_r)]);

% Confusion Matrices
for i=1:n.stimuliExperiment3
    switch i
        % happy top + happy bottom
        case 1
            % left-shifted
            confusionVectors.E3.happyHappy_LS_A_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.happyHappy_LS_A_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 2
            % right-shifted
            confusionVectors.E3.happyHappy_RS_A_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.happyHappy_RS_A_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 3
            % top-left bottom-right misaligned
            confusionVectors.E3.happyHappy_TLBR_MA_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.happyHappy_TLBR_MA_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 4
            % top-right bottom-left misaligned
            confusionVectors.E3.happyHappy_TRBL_MA_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.happyHappy_TRBL_MA_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        
        % angry top + happy bottom
        case 5
            % left-shifted
            confusionVectors.E3.angryHappy_LS_A_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryHappy_LS_A_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 6
            % right-shifted
            confusionVectors.E3.angryHappy_RS_A_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryHappy_RS_A_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 7
            % top-left bottom-right misaligned
            confusionVectors.E3.angryHappy_TLBR_MA_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryHappy_TLBR_MA_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 8
            % top-right bottom-left misaligned
            confusionVectors.E3.angryHappy_TRBL_MA_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryHappy_TRBL_MA_bottom(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;

        % angry top + angry bottom
        case 9
            % left-shifted
            confusionVectors.E3.angryAngry_LS_A_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryAngry_LS_A_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 10
            % right-shifted
            confusionVectors.E3.angryAngry_RS_A_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryAngry_RS_A_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 11
            % top-left bottom-right misaligned
            confusionVectors.E3.angryAngry_TLBR_MA_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryAngry_TLBR_MA_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 12
            % top-right bottom-left misaligned
            confusionVectors.E3.angryAngry_TRBL_MA_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryAngry_TRBL_MA_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;

        % angry top + happy bottom
        case 13
            % left-shifted
            confusionVectors.E3.angryHappy_LS_A_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryHappy_LS_A_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 14                
            % right-shifted
            confusionVectors.E3.angryHappy_RS_A_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryHappy_RS_A_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 15
            % top-left bottom-right misaligned
            confusionVectors.E3.angryHappy_TLBR_MA_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryHappy_TLBR_MA_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        case 16
            % top-right bottom-left misaligned
            confusionVectors.E3.angryHappy_TRBL_MA_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) =...
            confusionVectors.E3.angryHappy_TRBL_MA_top(i_t,...
                        perceptronOutput.experiment3(i,i_r)) + 1;
        otherwise
            disp('Error: There should only be 16 stimuli');
    end
end

%%
% overall
% happy top + happy bottom
%
% aligned
confusionVectors.E3.happyHappy_A_bottom =...
    confusionVectors.E3.happyHappy_LS_A_bottom +...
    confusionVectors.E3.happyHappy_RS_A_bottom;

% misaligned
confusionVectors.E3.happyHappy_MA_bottom =...
    confusionVectors.E3.happyHappy_TLBR_MA_bottom +...
    confusionVectors.E3.happyHappy_TRBL_MA_bottom;

% angry top + happy bottom
%
% aligned
confusionVectors.E3.angryHappy_A_bottom =...
    confusionVectors.E3.angryHappy_LS_A_bottom +...
    confusionVectors.E3.angryHappy_RS_A_bottom;

% misaligned
confusionVectors.E3.angryHappy_MA_bottom =...
    confusionVectors.E3.angryHappy_TLBR_MA_bottom +...
    confusionVectors.E3.angryHappy_TRBL_MA_bottom;

% angry top + angry bottom
%
% aligned
confusionVectors.E3.angryAngry_A_top =...
    confusionVectors.E3.angryAngry_LS_A_top +...
    confusionVectors.E3.angryAngry_RS_A_top;

% misaligned
confusionVectors.E3.angryAngry_MA_top =...
    confusionVectors.E3.angryAngry_TLBR_MA_top +...
    confusionVectors.E3.angryAngry_TRBL_MA_top;

% angry top + happy bottom
%
% aligned
confusionVectors.E3.angryHappy_A_top =...
    confusionVectors.E3.angryHappy_LS_A_top +...
    confusionVectors.E3.angryHappy_RS_A_top;

% misaligned
confusionVectors.E3.angryHappy_MA_top =...
    confusionVectors.E3.angryHappy_TLBR_MA_top +...
    confusionVectors.E3.angryHappy_TRBL_MA_top;